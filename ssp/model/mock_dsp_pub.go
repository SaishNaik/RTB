// Code generated by MockGen. DO NOT EDIT.
// Source: ssp/model (interfaces: IDSPPubModel)

// Package model is a generated GoMock package.
package model

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	mongo "ssp/lib/mongo"
	datastore "ssp/model/datastore"
)

// MockIDSPPubModel is a mock of IDSPPubModel interface
type MockIDSPPubModel struct {
	ctrl     *gomock.Controller
	recorder *MockIDSPPubModelMockRecorder
}

// MockIDSPPubModelMockRecorder is the mock recorder for MockIDSPPubModel
type MockIDSPPubModelMockRecorder struct {
	mock *MockIDSPPubModel
}

// NewMockIDSPPubModel creates a new mock instance
func NewMockIDSPPubModel(ctrl *gomock.Controller) *MockIDSPPubModel {
	mock := &MockIDSPPubModel{ctrl: ctrl}
	mock.recorder = &MockIDSPPubModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDSPPubModel) EXPECT() *MockIDSPPubModelMockRecorder {
	return m.recorder
}

// GetAllDSPForPub mocks base method
func (m *MockIDSPPubModel) GetAllDSPForPub(arg0 context.Context, arg1 *mongo.Client, arg2 string) ([]datastore.DSP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDSPForPub", arg0, arg1, arg2)
	ret0, _ := ret[0].([]datastore.DSP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDSPForPub indicates an expected call of GetAllDSPForPub
func (mr *MockIDSPPubModelMockRecorder) GetAllDSPForPub(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDSPForPub", reflect.TypeOf((*MockIDSPPubModel)(nil).GetAllDSPForPub), arg0, arg1, arg2)
}
